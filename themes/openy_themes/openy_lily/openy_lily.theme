<?php

/**
 * @file
 * OpenY Lily Theme File.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Element\RenderElement;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;
use Drupal\file\FileInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_node().
 */
function openy_lily_preprocess_node(&$variables) {
  if (function_exists(__FUNCTION__ . '_' . $variables['node']->bundle())) {
    $function = __FUNCTION__ . '_' . $variables['node']->bundle();
    $function($variables);
  }
  if (!in_array($variables['view_mode'], ['full', 'default'])) {
    return;
  }
  $variables['base_path'] = base_path();

  $variables['is_front'] = Drupal::service('path.matcher')->isFrontPage();
  if (!$variables['is_front']) {
    $front_page = Drupal::config('system.site')->get('page.front');
    $variables['is_front'] = '/node/' . $variables['node']->id() == $front_page;
  }
}

/**
 * Implements hook_preprocess_node() for the Blog Content Type.
 */
function openy_lily_preprocess_node_blog(&$variables) {
  $back_link_title = t('Back to Blog');
  $variables['back_link_title'] = $back_link_title;
  // @todo move this url out of the theme.
  $variables['back_link_path'] = Url::fromUri('internal:/blog')->toString();
}

/**
 * Implements hook_preprocess_node() for the Branch Content Type.
 */
function openy_lily_preprocess_node_branch(&$variables) {
  // Check that home branch enabled.
  if (\Drupal::hasService('plugin.manager.home_branch_library') && $variables['node']->getType() == 'branch' && $variables['page']) {
    // Fix hb_loc_selector_branch_page plugin for Open Y Lily theme.
    $variables['#attached']['library'][] = 'openy_lily/hb_loc_selector_branch_page_override';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function openy_lily_preprocess_paragraph(&$variables) {
  if (empty($variables['paragraph'])) {
    return;
  }
  if (function_exists(__FUNCTION__ . '_' . $variables['paragraph']->bundle())) {
    $function = __FUNCTION__ . '_' . $variables['paragraph']->bundle();
    $function($variables);
  }
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['label'] = $node->title->value;
  }

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  switch ($paragraph->getType()) {
    case 'small_banner':
    case 'banner':
      $variables['content']['image_path'] = '';
      if (empty($variables['content']['field_prgf_image'][0]['#media'])) {
        break;
      }
      /* @var \Drupal\media\Entity\Media $media */
      $media = $variables['content']['field_prgf_image'][0]['#media'];
      $media_entity = $media->getEntityTypeId();
      $media_bundle = $media->bundle();
      $media_view_mode = $variables['content']['field_prgf_image'][0]['#view_mode'];

      // Load Media entity view mode.
      /* @var \Drupal\core\Entity\Entity\EntityViewDisplay $view */
      $view = \Drupal::entityTypeManager()
        ->getStorage('entity_view_display')
        ->load($media_entity . '.' . $media_bundle . '.' . $media_view_mode);
      $image_style = $view->getRenderer('field_media_image')
        ->getSetting('image_style');

      // Load image file.
      $image = $media->get('field_media_image');

      // Get image style path.
      $path = ImageStyle::load($image_style)
        ->buildUrl($image->entity->uri->value);
      $variables['content']['image_path'] = $path;
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_lily_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $route_name = Drupal::routeMatch()->getRouteName();
  $node = Drupal::routeMatch()->getParameter('node');
  if (empty($node)) {
    $node = Drupal::routeMatch()->getParameter('node_preview');
  }

  if (empty($node)) {
    return;
  }

  // Add content type suggestions for node types.
  if (is_object($node)) {
    $node_type = $node->getType();
    $page__node_pos = array_search('page__node', $suggestions);
    $page__node__type = 'page__node__' . $node_type;
    array_splice($suggestions, $page__node_pos + 1, 0, $page__node__type);
  }
  if (!Drupal::service('path.matcher')->isFrontPage()) {
    if ($route_name == 'entity.node.preview') {
      $front_page = Drupal::config('system.site')->get('page.front');
      if ('/node/' . $node->id() == $front_page) {
        array_push($suggestions, 'page__front');
      }
    }
  }
  // Adds template for the membership page.
  if (is_object($node)) {
    $current_path = \Drupal::service('path.current')->getPath();
    // @todo hardcoded alias. Move it out of the theme.
    if ($current_path == 'membership') {
      array_push($suggestions, 'page__membership');
    }
  }
  // Adds template suggestions for 40x pages.
  $http_error_suggestions = [
    'system.403' => 'page__403',
    'system.404' => 'page__404',
  ];
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (isset($http_error_suggestions[$route_name])) {
    $suggestions[] = $http_error_suggestions[$route_name];
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function openy_lily_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    $suggestions[] = 'block__' . $block->getRegion() . '__' . $variables['elements']['#id'];
  }
  return $suggestions;
}

/**
 * Implements hook_preprocess_field().
 */
function openy_lily_preprocess_field(array &$variables) {
  switch ($variables['entity_type']) {
    // Logic for node.
    case 'node':
      // Check if exist sidebar field.
      $variables['wrapper_tag'] = $variables['field_name'] == 'field_sidebar_content' ? 'aside' : 'section';
      break;
    default:
      $variables['wrapper_tag'] = 'div';
      break;
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function openy_lily_form_system_theme_settings_alter(array &$form, FormStateInterface &$form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['camp_section'] = array(
    '#type' => 'details',
    '#title' => t('Camp section'),
    '#description' => t('Contains theme configuration for camp and camp related content.'),
    '#open' => TRUE,
  );
  $form['camp_section']['openy_lily_camp_section_logo'] = array(
    '#type' => 'managed_file',
    '#title' => t('Camp section logo'),
    '#description' => t('To display a logo in the header area on camp pages, and camp related landing pages, upload it here.</br>Image size suggested 92 x 70 pixels.'),
    '#upload_validators' => array(
      'file_validate_extensions' => array('png jpg jpeg gif svg'),
    ),
    '#upload_location' => 'public://',
    '#default_value' => theme_get_setting('openy_lily_camp_section_logo'),
  );
  $form['camp_section']['openy_lily_camp_favicon'] = array(
    '#type' => 'managed_file',
    '#title' => t('Camp favicon'),
    '#description' => t('To display a favicon on camp pages, and camp related landing pages, upload it here.</br>Image sizes must be 16×16, 32×32, 48×48, or 64×64 pixels.</br>Accepted file types ico, png, gif.'),
    '#upload_validators' => array(
      'file_validate_extensions' => array('ico png gif'),
    ),
    '#upload_location' => 'public://',
    '#default_value' => theme_get_setting('openy_lily_camp_favicon'),
  );

  // Submission handler is not working on theme form
  // See https://www.drupal.org/node/1862892 & https://www.drupal.org/node/2779947
  // Setting file usage for openy_lily theme.
  if ($image_fields = theme_get_setting('openy_lily_image_fields')) {
    foreach ($image_fields as $image_field) {
      $fid_array = theme_get_setting($image_field);
      if (!empty($fid_array) && is_array($fid_array) && is_numeric(reset($fid_array))) {
        $file = File::load(reset($fid_array));
        if ($file !== NULL) {
          openy_lily_set_theme_file_usage($file);
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function openy_lily_page_attachments_alter(array &$page) {
  // Remove and replace the favicon if this page is a camp node or landing page
  // related to a camp, and the custom camp favicon has been set for the theme.

  // Exit if not a node page, or if the 'openy_loc_camp.camp_service' is not available.
  if ( !\Drupal::hasService('openy_loc_camp.camp_service')) {
    return;
  }
  $camp_service = \Drupal::service('openy_loc_camp.camp_service');
  $node = \Drupal::request()->attributes->get('node');
  if (!$node || !is_object($node)) {
    return;
  }

  // Exit if not a camp or related to a camp.
  if (!$camp_service->nodeHasOrIsCamp($node)) {
    return;
  }

  $fid = theme_get_setting('openy_lily_camp_favicon');
  // Exit if no Camp Favicon is set.
  if (empty($fid) || !is_array($fid) || !is_numeric(reset($fid))) {
    return;
  }

  $file = File::load(reset($fid));
  // Exit if no file exists.
  if ($file == NULL) {
    return;
  }

  // Remove default favicon.
  if (!empty($page['#attached']['html_head_link'])) {
    foreach ($page['#attached']['html_head_link'] as $key => $value) {
      if (empty($value)) {
        continue;
      }
      foreach ($page['#attached']['html_head_link'][$key] as $sub_key => $sub_value) {
        if (!empty($sub_value['rel']) && $sub_value['rel'] == 'shortcut icon') {
          unset($page['#attached']['html_head_link'][$key][$sub_key]);
        }
      }
      if (empty($page['#attached']['html_head_link'][$key])) {
        unset($page['#attached']['html_head_link'][$key]);
      }
    }
  }

  // Get Camp section favicon & mime type.
  $favicon = $file->url();
  $type = $file->getMimeType();

  // Attach favicon.
  $page['#attached']['html_head_link'][][] = array(
    'rel' => 'shortcut icon',
    'href' => UrlHelper::stripDangerousProtocols($favicon),
    'type' => $type,
  );
}

/**
 * Set a file usage by the theme.
 *
 * @param \Drupal\file\FileInterface $file
 *   The file to set the usage of.
 */
function openy_lily_set_theme_file_usage(FileInterface $file) {
  $file_usage = \Drupal::service('file.usage');
  $file_uses = $file_usage->listUsage($file);
  if (empty($file_uses) || !array_key_exists('openy_lily', $file_uses)) {
    // Set usage.
    $file_usage->add($file, 'openy_lily', 'theme', 1);
  }
}

/**
 * Implements template_preprocess_page().
 */
function openy_lily_preprocess_page(&$variables) {
  if (Drupal::routeMatch()->getRouteName() == 'entity.node.preview') {
    $variables['node'] = Drupal::routeMatch()->getParameter('node_preview');
  }
  $route_name = 'view.site_search.search_results';
  $route_provider = \Drupal::service('router.route_provider');
  $routes = $route_provider->getRoutesByNames([$route_name]);
  if (!empty($routes)) {
    $variables['search_view_content_path'] = Url::fromRoute('view.site_search.search_results');
  }
  else {
    // @todo move out from the theme.
    $variables['search_view_content_path'] = Url::fromUri('internal:/search')
      ->toString();
  }

  // Adds page title for login and register pages.
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')
    ->getTitle($request, $route_match->getRouteObject());
  $variables['page_title'] = $title;

  $site_config = \Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');
  $site_phone = $site_config->get('phone');
  $site_extra_phone = $site_config->get('extra_phone');
  if (!empty($site_phone) && !empty($site_extra_phone)) {
    $variables['site_phone'] = [
      '#type' => 'link',
      '#title' => $site_extra_phone,
      '#url' => Url::fromUri('tel:' . rawurlencode(preg_replace('/[^0-9]/', '', $site_phone))),
      '#options' => [
        'external' => TRUE,
        'attributes' => [
          'class' => [
            'site-phone',
          ],
          'title' => t('Call us at @tel', ['@tel' => $site_phone]),
        ],
      ],
    ];
  }
  $newsletter_link = $site_config->get('newsletter_link');
  if (!empty($newsletter_link)) {
    $variables['newsletter_link'] = [
      '#type' => 'link',
      '#title' => t('Sign Up For Our Newsletter'),
      '#url' => Url::fromUri($newsletter_link),
      '#options' => [
        'external' => TRUE,
        'attributes' => [
          'class' => [
            'newsletter-link',
            'btn',
            'btn-block',
            'btn-info',
          ],
          'target' => '_blank',
        ],
      ],
    ];
  }
  // @todo move out of the theme.
  $variables['locations_path'] = Url::fromUri('internal:/locations')
    ->toString();

  // Set custom theme variables for page when they are set.
  if ($image_fields = \Drupal::config('openy_lily.settings')
    ->get('openy_lily_image_fields')
  ) {
    foreach ($image_fields as $image_template_variable => $theme_setting_key) {
      $fid = theme_get_setting($theme_setting_key);
      if (!empty($fid) && is_array($fid) && is_numeric(reset($fid))) {
        $file = File::load(reset($fid));
        if ($file !== NULL) {
          $variables[$image_template_variable] = $file->getFileUri();
        }
      }
    }
  }

  // Set special variables for Camp and Branch (Location) nodes.
  if (!empty($variables['node']) && $variables['node'] instanceof NodeInterface) {
    $node = $variables['node'];
    /** @var Drupal\openy_loc_camp\CampService $service */
    if (\Drupal::hasService('openy_loc_camp.camp_service') && $service = \Drupal::service('openy_loc_camp.camp_service')) {
      if ($service->nodeHasOrIsCamp($node)) {
        $variables['page_class'] = 'is-camp';
      }
      if ($node->bundle() == 'branch') {
        $variables['page_class'] = 'is-branch';
      }
    }
  }
  // Camp logo.
  $variables['camp_section_image'] = !empty($variables['camp_section_logo']) ? file_create_url($variables['camp_section_logo']) : '';

  // Add home branch support to Open Y Lily theme.
  if (\Drupal::hasService('plugin.manager.home_branch_library')) {
    $hb_plugin_service = \Drupal::service('plugin.manager.home_branch_library');
    $hb_plugin_service->attachHbLibrarySettings($variables, 'hb_menu_selector', [
      // Fix hb_menu_selector classes.
      'menuSelector' => '.nav-global .secondary_menu ul.navbar-nav, .mobile_menu ul.nav-level-1',
    ]);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_lily_theme_suggestions_radios_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = 'radios__' . $variables['element']['#name'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function openy_lily_theme_suggestions_slick_alter(array &$suggestions, array $variables, $hook) {
  $types = [];
  foreach ($variables['element']['#items'] as $item) {
    $types[] = 'slick__' . $item['slide']['#node']->bundle();
  }
  $suggestions += array_unique($types);
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function openy_lily_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#form_id'])) {
    array_push($suggestions, 'form__' . $variables['element']['#form_id']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for footer menus.
 */
function openy_lily_preprocess_menu__footer_menus(&$variables) {
  $variables['#cache']['contexts'][] = 'url.path';
}

/**
 * Implements hook_preprocess_block().
 */
function openy_lily_preprocess_block(&$variables) {
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_region().
 */
function openy_lily_preprocess_region(&$variables) {
  $variables['attributes']['class'][] = $variables['elements']['#region'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_lily_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $footer_menus = [
    'menu__footer_menu_left',
    'menu__footer_menu_center',
    'menu__footer_menu_right',
    'menu__footer',
  ];
  if (in_array($variables['theme_hook_original'], $footer_menus)) {
    $suggestions[] = 'menu__footer_menus';
  }
  if (in_array($variables['theme_hook_original'], ['menu__top_menu_2'])) {
    $suggestions[] = 'menu__top_menu';
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function openy_lily_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  if (in_array('node__blog__default', $suggestions)) {
    array_push($suggestions, 'node__blog__full');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_lily_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#name'])) {
    array_push($suggestions, 'form_element__' . $variables['element']['#name']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_lily_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#name'])) {
    array_push($suggestions, 'form_element_label__' . $variables['element']['#name']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_lily_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#name'])) {
    array_push($suggestions, 'input__' . $variables['element']['#name']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openy_lily_preprocess_picture(&$variables) {
  // Add responsiveness.
  $variables['attributes']['class'][] = 'img-responsive';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openy_lily_preprocess_image(&$variables) {
  // Add responsiveness.
  $variables['attributes']['class'][] = 'img-responsive';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openy_lily_preprocess_expander_block(&$variables) {
  $id = 'collapse-' . $variables['entity']->bundle() . '-' . $variables['entity']->id();
  $variables['block_id'] = Html::getUniqueId($id);
}

/**
 * Implements hook_preprocess_html().
 */
function openy_lily_preprocess_html(&$variables) {
  // Preprocess landing page.
  if (!empty($variables['node_type']) && $variables['node_type'] == 'landing_page') {
    if (($node = \Drupal::routeMatch()->getParameter('node')) || ($node = \Drupal::routeMatch()->getParameter('node_preview'))) {
      // Load page header paragraphs.
      if ($header = $node->field_header_content->getValue()) {
        foreach ($header as $p) {
          if ($paragraph = \Drupal::service('entity.manager')
            ->getStorage('paragraph')
            ->load($p['target_id'])
          ) {
            // Take action for microsites_menu paragraph.
            if ($paragraph && $paragraph->bundle() == 'microsites_menu') {
              // Add class to the body.
              $variables['attributes']['class'][] = 'microsites-menu';
              if ($paragraph->field_prgf_ms_menu_hide_menu->value) {
                $variables['attributes']['class'][] = 'microsites-menu--hide-main-menu';
              }
            }
          }
        }
      }
    }
  }
  // Get title from node or page.
  if (isset($variables['node'])) {
    $variables['title'] = $variables['node']->title->value;
  }
  else {
    $variables['title'] = $variables['page']['#title'];
  }

  $current_route_name = Drupal::service('current_route_match')->getRouteName();
  $classes = [];

  if ($current_route_name == 'entity.node.canonical') {
    $node = Drupal::routeMatch()->getParameter('node');
  }
  if ($current_route_name == 'entity.node.preview') {
    $node = Drupal::routeMatch()->getParameter('node_preview');
  }

  if (!$variables['is_front'] = Drupal::service('path.matcher')
      ->isFrontPage() && !empty($node)
  ) {
    if ($current_route_name == 'entity.node.preview') {
      $variables['is_front'] = '/node/' . $node->id() == Drupal::config('system.site')
          ->get('page.front');
    }
  }

  if ($variables['is_front']) {
    $classes = ['page_home'];
  }
  if (!is_array($variables['attributes'])) {
    $variables['attributes']->addClass($classes);
  }

  if (empty($variables['node']) && !empty($node)) {
    $variables['node'] = $node;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openy_lily_preprocess_pager(&$vars) {
  if (empty($vars['items']['pages'])) {
    return;
  }
  foreach ($vars['items']['pages'] as &$item) {
    $item['attributes'] = new Attribute();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openy_lily_preprocess_node__blog__camp_blog_teaser(&$vars) {
  if ($site_section = Drupal::service('ymcali.page.context')->getContext()) {
    $vars['page_title'] = $site_section->getTitle();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepares variables for input templates.
 * Default template: input.html.twig.
 *
 * @param mixed $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #attributes.
 */
function openy_lily_preprocess_input(&$variables) {
  $element = $variables['element'];
  $variables['children'] = $element['#children'];

  if (isset($element['#skip_ymca_preprocess']) && $element['#skip_ymca_preprocess']) {
    return;
  }

  $types = ['url', 'textfield', 'tel', 'password', 'date'];
  if (in_array($element['#type'], $types)) {
    $classes = [
      'form-control',
      'text',
    ];
  }
  elseif ($element['#type'] == 'submit' && $element['#ajax_processed'] != TRUE) {
    $classes = [
      'form_submit',
      'btn',
      'btn-lg',
      'btn-primary',
    ];
  }
  elseif ($element['#type'] == 'email') {
    $classes = [
      'form-control',
      'text',
      'email',
    ];
  }

  if (isset($classes)) {
    $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $classes);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepares variables for textarea templates.
 * Default template: textarea.html.twig.
 *
 * @param mixed $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #description, #rows, #cols,
 *     #placeholder, #required, #attributes, #resizable.
 */
function openy_lily_preprocess_textarea(&$variables) {
  $element = $variables['element'];
  Element::setAttributes($element, [
    'id',
    'name',
    'rows',
    'cols',
    'placeholder',
  ]);
  RenderElement::setAttributes($element, ['form-textarea']);
  $variables['wrapper_attributes'] = new Attribute();
  $variables['attributes'] = new Attribute($element['#attributes']);
  $variables['value'] = $element['#value'];
  $variables['resizable'] = !empty($element['#resizable']) ? $element['#resizable'] : NULL;
  $variables['required'] = !empty($element['#required']) ? $element['#required'] : NULL;
  $variables['attributes']['class'][] = 'form-control';
  $variables['attributes']['class'][] = 'text';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepares variables for select element templates.
 * Default template: select.html.twig.
 *
 * It is possible to group options together; to do this, change the format of
 * $options to an associative array in which the keys are group labels, and the
 * values are associative arrays in the normal $options format.
 *
 * @param mixed $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #options, #description, #extra,
 *     #multiple, #required, #name, #attributes, #size.
 */
function openy_lily_preprocess_select(&$variables) {
  $element = $variables['element'];
  Element::setAttributes($element, ['id', 'name', 'size']);
  RenderElement::setAttributes($element, ['form-select']);

  $variables['attributes'] = $element['#attributes'];
  $variables['options'] = form_select_options($element);
  $variables['attributes']['class'][] = 'form-control';
  $variables['attributes']['class'][] = 'text';

  // Sort location options.
  if (in_array('option_emails', $variables['element']['#parents'])) {
    $options = $variables['options'];
    // Remove empty option from array, due to sort reason.
    $empty_option = $options[0];
    unset($options[0]);
    // Sort options array by location's label.
    $sort = [];
    foreach ($options as $key => $row) {
      $sort[$key] = $row['label'];
    }
    array_multisort($sort, SORT_ASC, $options);
    // Pass back empty option on first position.
    array_unshift($options, $empty_option);
    // Finally pass back sorted options array.
    $variables['options'] = $options;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openy_lily_preprocess_form_element(&$variables) {
  $element = $variables['element'];
  if (!empty($element['#title_extra'])) {
    $variables['label']['#title_extra'] = $element['#title_extra'];
  }
  // Prepare address field.
  if (isset($element['#attributes']['class'][0]) && $element['#attributes']['class'][0] == 'address-line1') {
    $variables['label']['#title'] = t('Address 1');
  }
  if (isset($element['#attributes']['class'][0]) && $element['#attributes']['class'][0] == 'address-line2') {
    $variables['label']['#title_display'] = $variables['label_display'] = $variables['title_display'] = 'before';
    $variables['label']['#title'] = t('Address 2 <small>(optional) </small>');
  }
  if (isset($element['#attributes']['autocomplete']) && $element['#attributes']['autocomplete'] == 'address-level2') {
    $variables['label']['#title'] = t('City <small>(optional) </small>');
  }
  if (isset($element['#attributes']['autocomplete']) && $element['#attributes']['autocomplete'] == 'address-level1') {
    $variables['label']['#title'] = t('State <small>(optional) </small>');
    $element['#empty_option'] = t('Select State or Province');
    $element['#options'][''] = $element['#empty_option'];
  }
  if (isset($element['#attributes']['checked']) && $element['#attributes']['checked'] == 'checked') {
    $variables['attributes']['class'] = 'checked';
  }
  $elements_names = [
    'mb_session_type',
    'mb_program',
    'mb_location',
  ];
  if (isset($element['#name']) && in_array($element['#name'], $elements_names)) {
    $variables['title'] = $element['#title'];
    $variables['id'] = $element['#id'];
  }
  $variables['element'] = $element;
}

/**
 * Implements hook_preprocess_form_element_label().
 */
function openy_lily_preprocess_form_element_label(&$variables) {
  if (!empty($variables['element']['#title_extra'])) {
    $variables['title_extra']['#markup'] = $variables['element']['#title_extra'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepares variables for form templates.
 * Default template: form.html.twig.
 *
 * @param mixed $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #action, #method, #attributes, #children.
 */
function openy_lily_preprocess_form(&$variables) {
  $element = $variables['element'];
  if (isset($element['#action'])) {
    $element['#attributes']['action'] = UrlHelper::stripDangerousProtocols($element['#action']);
  }
  Element::setAttributes($element, ['method', 'id']);
  if (empty($element['#attributes']['accept-charset'])) {
    $element['#attributes']['accept-charset'] = "UTF-8";
  }
  $variables['attributes'] = $element['#attributes'];
  $variables['children'] = $element['#children'];

  if ($element['#form_id'] == 'user_login_form' || $element['#form_id'] == 'user_pass') {
    $variables['attributes']['class'][] = 'container';
  }
}

/**
 * Prepares variables for radios templates.
 *
 * Default template: radios.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #options, #description, #required,
 *     #attributes, #children.
 */
function openy_lily_preprocess_radios(&$variables) {
  $element = $variables['element'];
  $variables['attributes'] = [];
  if (isset($element['#id'])) {
    $variables['attributes']['id'] = $element['#id'];
  }
  if (isset($element['#attributes']['title'])) {
    $variables['attributes']['title'] = $element['#attributes']['title'];
  }
  $variables['children'] = $element['#children'];
  $variables['attributes']['class'][] = 'js-form-type-radios';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openy_lily_preprocess_file_link(&$variables) {
  $file = $variables['file'];
  $options = [];

  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);
  $url = file_create_url($file_entity->getFileUri());
  $options['query'][$file->getChangedTime()] = '';

  $mime_type = $file->getMimeType();
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $file_entity->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $file_entity->getFilename();
  }

  $variables['link'] = Link::fromTextAndUrl($link_text, Url::fromUri($url, $options));
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * This is hardcoded in profile so we need this to be able to change the title.
 */
function openy_lily_preprocess_field__node__field_location_directions(array &$variables) {
  // Change link title to 'website:' since it's changed to 'Directions' in
  // openy_lily theme.
  $variables['items'][0]['content']['#title'] = t('website:');
  $link_title = $variables['element']['#items']->title;
  // Change link text since URL is used as link text for
  // 'Separate link text and URL' format by default.
  $variables['items'][0]['content']['#url_title'] = $link_title;
}

/**
 * Preprocess paragraph - social list.
 *
 * @param $variables
 */
function openy_rose_preprocess_paragraph_social_list(&$variables) {
  $block = $variables['content']['field_prgrf_sl_block'];
  if (isset($block[0]['#name']) && isset($block[0]['#display_id'])) {
    $variables['content']['posts'] = \Drupal::service('renderer')
      ->render(views_embed_view($block[0]['#name'], $block[0]['#display_id']));
  }
}

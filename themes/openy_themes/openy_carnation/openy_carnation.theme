<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_html().
 */
function openy_carnation_preprocess_html(array &$variables) {
  $variables['theme_name'] = \Drupal::service('theme.manager')->getActiveTheme()->getName();
}

/**
 * Implements hook_preprocess_node().
 */
function openy_carnation_preprocess_node(&$variables, $hook) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    switch ($node->getType()) {
      // Program pages.
      case 'program':
        if (!$node->get('field_program_image')->isEmpty()) {
          $uri = $node->get('field_program_image')->entity->get('field_media_image')->entity->uri->value;
          $variables['header_image'] = ImageStyle::load('prgf_gallery')->buildUrl($uri);
        }
        break;

      // Sub-Program pages.
      case 'program_subcategory':
        if (!$node->get('field_category_image')->isEmpty()) {
          $uri = $node->get('field_category_image')->entity->get('field_media_image')->entity->uri->value;
          $variables['header_image'] = ImageStyle::load('prgf_gallery')->buildUrl($uri);
        }
        break;
    }
  }
}

/**
 * Implements hook_preprocess_node_TYPEID() for the Blog Content Type.
 */
function openy_carnation_preprocess_node_blog(&$variables) {
  $back_link_title = t('Back to Blog');
  $variables['back_link_title'] = $back_link_title;
  $variables['back_link_path'] = Url::fromUri('internal:/blog')->toString();
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Pass block region value to content so this can be used in
 * MYTHEME_theme_suggestions_menu_alter.
 */
function openy_carnation_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $region = Block::load($variables['elements']['#id'])->getRegion();
    $variables['content']['#attributes']['region'] = $region;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openy_carnation_preprocess_menu(&$variables) {
  if ($variables['menu_name'] === 'main') {
    $variables['display_search'] = theme_get_setting('display_search_form');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function openy_carnation_preprocess_page(array &$variables) {
  $variables['relative_logo_url'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
  $variables['display_search'] = theme_get_setting('display_search_form');
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function openy_carnation_preprocess_menu_local_task(array &$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_input().
 *
 * Adds classes to inputs.
 */
function openy_carnation_preprocess_input(&$variables) {
  if ($variables['element']['#type'] == 'submit') {

    if ($variables['element']['#value'] == t('Preview')) {
      $variables['attributes']['class'][] = 'btn-secondary';
    }

    if (empty(array_intersect([
      'btn-primary',
      'btn-secondary',
      'btn-success',
      'btn-warning',
      'btn-danger',
      'btn-link',
      'btn-info',
    ], $variables['attributes']['class']))) {
      $variables['attributes']['class'][] = 'btn-primary';
    }
    if (!in_array('btn', $variables['attributes']['class'])) {
      $variables['attributes']['class'][] = 'btn';
    }
    else {
      $variables['attributes']['class'][] = 'btn';
      $variables['attributes']['class'][] = 'btn-primary';
      $variables['attributes'] = new Attribute($variables['attributes']);
    }
  }
  if ($variables['element']['#type'] == 'textfield'
    || $variables['element']['#type'] == 'email'
    || $variables['element']['#type'] == 'date'
    || $variables['element']['#type'] == 'password') {
    $variables['attributes']['class'][] = 'form-control';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide region based menu suggestions.
 */
function openy_carnation_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $suggestions[] = 'menu__' . $variables['menu_name'] . '__' . $variables['attributes']['region'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_carnation_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if (in_array('page__user__register', $suggestions)
    || in_array('page__user__register', $suggestions)
    || in_array('page__user__password', $suggestions)) {
    $suggestions[] = 'page__user__login';
  }
}

/**
 * Implements THEME_preprocess_breadcrumb.
 *
 * Trims long page title breadcrumbs.
 */
function openy_carnation_preprocess_breadcrumb(&$variables) {
  if (isset($variables['breadcrumb'])) {
    $last_item = end($variables['breadcrumb']);
    if (strlen($last_item['text']) > 20) {
      $variables['breadcrumb'][key($variables['breadcrumb'])]['text'] = t('Current page');
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_carnation_theme_suggestions_slick_alter(array &$suggestions, array $variables, $hook) {
  $types = [];
  foreach ($variables['element']['#items'] as $item) {
    $types[] = 'slick__' . $item['slide']['#node']->bundle();
  }
  $suggestions += array_unique($types);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_carnation_theme_suggestions_radios_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = 'radios__' . $variables['element']['#name'];
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function openy_carnation_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#form_id'])) {
    array_push($suggestions, 'form__' . $variables['element']['#form_id']);
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function openy_carnation_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['theme_settings']['display_search_form'] = [
    '#type' => 'checkbox',
    '#title' => t('Display the search form'),
    '#default_value' => theme_get_setting('display_search_form'),
  ];
}

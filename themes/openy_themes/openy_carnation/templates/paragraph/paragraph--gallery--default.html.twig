{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
set classes = [
  'paragraph',
  'paragraph-gallery',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
]
%}
{% if content.field_prgf_images['#items']|length >= 1 %}
<div{{ attributes.addClass(classes) }}>
  <div class="carousel slide" data-ride="carousel">

    <div class="carousel-inner">
      {% for key, value in content.field_prgf_images['#items'] %}
      <div class="carousel-item{% if key == 0 %} active{% endif %}">

        {# images #}
        {{ content.field_prgf_images[key] }}

        {# caption #}
        {% if content.field_prgf_images[key]['#media'].field_media_caption is not empty and content.field_prgf_images[key]['#media'].field_media_caption.0.value is not empty %}
        <div class="carousel-caption d-none d-md-block">
          {{ content.field_prgf_images[key]['#media'].field_media_caption.0.value }}
        </div>
        {% endif %}

      </div>
      {% endfor %}
    </div>
    {% if content.field_prgf_images['#items']|length > 1 %}
    <a class="carousel-control-prev" href=".carousel" data-slide="prev" aria-hidden="true" tabindex="-1">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="sr-only" aria-hidden="true">{{ 'Previous'|t }}</span>
    </a>
    <a class="carousel-control-next" href=".carousel" data-slide="next" aria-hidden="true" tabindex="-1">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="sr-only" aria-hidden="true">{{ 'Next'|t }}</span>
    </a>
    {% endif %}
  </div>

  <div class="cta-group-wrapper d-flex h-100">
    <div class="container align-items-stretch m-auto p-5 py-lg-3 text-center text-white">
      <div class="row">
        <div class="cta-group col-12">
          <h1 class="display-4 text-uppercase">
            {{ content.field_prgf_headline }}
          </h1>
          <div class="text">
            {{ content.field_prgf_description }}
          </div>
          {% if content.field_prgf_link|render|trim is not empty %}
          <div class="mt-3">
            {{ content.field_prgf_link }}
          </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>
{% endif %}

{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{%
set classes = [
  'node',
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
]
%}
{% set directions_title = content.field_location_directions.0['#title'] %}
{% set directions_url = content.field_location_directions.0['#url'] %}
{% set fax_suffix = content.field_location_fax.0['#title'] ? '(fax)'|t %}

{# Branch header #}
<div{{ attributes.addClass('branch-header') }}>
  <section class="hidden-xs desktop">
    <div class="container">
      <address class="row branch-header-inner branch-info" data-branch-name="{{ node.label }}">
        <div class="column col-sm-3 col-md-2 branch-header__item">
          <h4>{{ 'WELCOME TO THE'|t }}</h4>
          <p>{{ label }}</p>
          <p class="branch-header__directions"><a href="{{ directions_url }}" title="{{ directions_title }}">{{ directions_title }}</a></p>
        </div>
        <div class="column col-sm-3 address-wrapper branch-header__item">
          <h4>{{ 'ADDRESS'|t }}</h4>
          {{ content.field_location_address }}
        </div>
        <div class="column col-sm-3 col-md-2 branch-header__item">
          <h4>{{ 'PHONE'|t }}</h4>
          {{ content.field_location_phone }}
          {{ content.field_location_fax }} {{ fax_suffix }}
        </div>
        <div class="column col-sm-3 col-md-2 branch-header__item">
          <h4>{{ 'TODAY\'S HOURS'|t }}</h4>
          {{ content.field_branch_hours }}
        </div>
        <div class="column col-sm-3 col-md-3 save-link branch-header__item">
          {# @see openy_branch_selector module #}
          {{ content.openy_branch_selector }}
        </div>
      </address>
    </div>
  </section>

  <blockquote class="hidden-sm hidden-md hidden-lg mobile">
    <address class="container">
      <div class="row">
        <div class="col-xs-12">
          <h4>{{ 'WELCOME TO THE'|t }}</h4>
          <p>{{ label }}</p>
          <p class="branch-header__directions"><a href="{{ directions_url }}" title="{{ directions_title }}">{{ directions_title }}</a></p>
        </div>
        <div class="ui-tabs">
          <ul class="ui-tabs-nav">
            <li><a href="#tabs-phone"><i class="fa fa-phone" aria-hidden="true"></i></a></li>
            <li><a href="#tabs-marker"><i class="fa fa-map-marker" aria-hidden="true"></i></a></li>
            <li><a href="#tabs-clock"><i class="fa fa-clock-o" aria-hidden="true"></i></a></li>
          </ul>
          <div id="tabs-phone" class="ui-tabs-panel col-xs-12">
            <h4>{{ 'PHONE'|t }}</h4>
            {{ content.field_location_phone }}
            {{ content.field_location_fax }} {{ fax_suffix }}
          </div>
          <div id="tabs-marker" class="ui-tabs-panel col-xs-12">
            <h4>{{ 'ADDRESS'|t }}</h4>
            {{ content.field_location_address }}
          </div>
          <div id="tabs-clock" class="ui-tabs-panel col-xs-12">
            <h4>{{ 'TODAY\'S HOURS'|t }}</h4>
            {{ content.field_branch_hours }}
          </div>
        </div>
        <div id="save-location">
          {# @see openy_branch_selector module #}
          {{ content.openy_branch_selector }}
        </div>
      </div>
    </address>
  </blockquote>
</div>
<header>
  {{ content.field_header_content }}
</header>

{# Branch content #}
<div class="container">
  <div class="row">
    <div class="main-region col-sm-12">
      <div class="branch-content">
        <article{{ attributes.addClass(classes) }}>
          <div{{ content_attributes.addClass('node__content') }}>
            {{ content.field_content }}
          </div>
        </article>
      </div>
    </div>
  </div>
</div>

{{ content.field_bottom_content }}

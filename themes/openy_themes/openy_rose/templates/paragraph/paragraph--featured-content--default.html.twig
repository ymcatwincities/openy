{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
set classes = [
  'paragraph',
  'featured-content',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
]
%}
<div{{ attributes.addClass(classes) }}>
  <h2 class="h1">
    {{ content.field_prgf_headline }}
  </h2>
  <div class="description">
      {{ content.field_prgf_description }}
  </div>

  {#
    For printing the columns we need access to the grid style which we don't
    have after this was converted from a field collection.
  #}
  {{ attach_library('openy_rose/featured_slider') }}
  <div class="{{ 'wrapper-' ~ content.field_prgf_fc_clm_description['#field_name']|clean_class}} row">
    {% if content.field_prgf_grid_style.0['#markup'] == '2' %}
      {% set item_class = 'col-xs-12 col-sm-6' %}
    {% elseif content.field_prgf_grid_style.0['#markup'] == '3' %}
      {% set item_class = 'col-xs-12 col-sm-4' %}
    {% elseif content.field_prgf_grid_style.0['#markup'] == '4' %}
      {% set item_class = 'col-xs-12 col-sm-3' %}
    {% endif %}

    {% for key, item in content.field_prgf_fc_clm_description %}
      {% if key matches '/^\\d+$/' %}
        <div class="{{ item_class }} row-eq-height">
          {{ item }}
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <div class="align-center">
    {% if content.field_prgf_link.0["#title"] %}
      <div class="btn btn-default btn-link blue">
        {{ content.field_prgf_link }}
      </div>
    {% endif %}
  </div>
</div>

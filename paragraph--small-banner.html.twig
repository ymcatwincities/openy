{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */

 {%
  set colors = {
    bottom: content.field_prgf_color.0|render|striptags|trim,
    top   : content.field_prgf_color.1|render|striptags|trim}
  }
%}
#}



{%
  set colors = {
    bottom: content.field_prgf_color.0|render|striptags|trim,
    top: content.field_prgf_color.1|render|striptags|trim
  }
%}

{% set background_style = "" %}
{% if colors.bottom is not empty and colors.top  is not empty %}
  {% set background_style = "background: linear-gradient(to top, color_bottom, color_top);" %}
{% elseif colors.bottom is not empty and colors.top is empty %}
  {% set background_style = "background-color: color_bottom;" %}
{% endif %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    'banner',
    'banner--small',
    (colors.bottom is not empty and colors.top is empty) ? 'color-assigned' : '',
  ]
%}
<div{{ attributes.addClass(classes) }} style="{{ background_style|replace({'color_bottom': colors.bottom, 'color_top': colors.top}) }}">
  <div class="banner-image">
    <div class="banner-image-wrapper">
      {{ content.field_prgf_image }}
    </div>
  </div>
  <div class="container">
    <div class="row">
      <div class="col-sm-12 col-md-8">
        <div class="banner-cta-section">
          <h3 class="banner-title">
            {{ content.field_prgf_headline }}
          </h3>
        </div>
      </div>
    </div>
  </div>
</div>

<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function openy_node_event_theme($existing, $type, $theme, $path) {
  return [
    'event_location_info' => [
      'variables' => [
        'info' => [],
      ],
      'template' => 'event-location-info',
    ],
    'event_date_info' => [
      'variables' => [
        'info' => [],
        'atc' => [],
      ],
      'template' => 'event-date-info',
    ],
    'event_contact_info' => [
      'variables' => [
        'info' => [],
      ],
      'template' => 'event-contact-info',
    ],
  ];
}

/**
 * Implements hook_preprocess_field().
 *
 * Add location and date information to event individual page.
 */
function openy_node_event_preprocess_field__node__field_event_location__event(&$variables) {
  $element = $variables['element'];
  /** @var \Drupal\node\Entity\Node $node */
  $node = $element['#object'];
  if ($element['#view_mode'] != 'full') {
    return;
  }

  // Get dates.
  $datesField = $node->get('field_event_dates')->getValue();
  if (empty($datesField[0])) {
    return;
  }
  $timezone = drupal_get_user_timezone();
  $startDt = DrupalDateTime::createFromFormat(DATETIME_DATETIME_STORAGE_FORMAT, $datesField[0]['value'], DATETIME_STORAGE_TIMEZONE);
  $startDt->setTimezone(timezone_open($timezone));
  $endDt = DrupalDateTime::createFromFormat(DATETIME_DATETIME_STORAGE_FORMAT, $datesField[0]['end_value'], DATETIME_STORAGE_TIMEZONE);
  $endDt->setTimezone(timezone_open($timezone));
  $datesInfo = [
    'date_start' => $startDt,
    'date_end' => $endDt,
  ];
  $description = strip_tags($node->field_event_description->value);
  $description = substr($description, 0, 300);
  $description = substr($description, 0, strrpos($description, ' ')) . " ...";
  $datesAtc = [
    'atc_date_start' => $startDt->format('Y-m-d H:i:s', ['timezone' => $timezone]),
    'atc_date_end' => $endDt->format('Y-m-d H:i:s', ['timezone' => $timezone]),
    'atc_timezone' => $timezone,
    'atc_title' => $node->getTitle(),
    'atc_description' => $description,
  ];

  // Get locations.
  $locationField = $node->get('field_event_location')->getValue();
  foreach ($locationField as $i => $item) {
    $location = Node::load($item['target_id']);
    $locTitle = $location->getTitle();
    $locLink = $location->toUrl();

    $locCoord = $location->get('field_location_coordinates')->getValue();
    $directions = !empty($locCoord[0]['lat']) ? Link::fromTextAndUrl(
      t('Get Directions'),
      Url::fromUri('https://www.google.com/maps/dir/Current+Location/' . $locCoord[0]['lat'] . ',' . $locCoord[0]['lng'],
        ['attributes' => ['target' => '_blank']])
    ) : '';

    $locAddress = $location->get('field_location_address')->getValue();
    $address = [];
    if (!empty($locAddress[0]['address_line1'])) {
      $address[] = $locAddress[0]['address_line1'];
    }
    if (!empty($locAddress[0]['locality'])) {
      $address[] = $locAddress[0]['locality'];
    }
    if (!empty($locAddress[0]['administrative_area'])) {
      $address[] = $locAddress[0]['administrative_area'];
    }
    if (!empty($locAddress[0]['postal_code'])) {
      $address[] = $locAddress[0]['postal_code'];
    }

    $renderLocation = [
      '#theme' => 'event_location_info',
      '#info' => [
        'loc_link' => Link::fromTextAndUrl($locTitle, $locLink),
        'loc_address' => implode(', ', $address),
        'directions' => $directions,
      ],
    ];
    $datesAtc['atc_location'] = $locTitle;
    $datesAtc['atc_organizer'] = $locTitle;
    $renderDate = [
      '#theme' => 'event_date_info',
      '#info' => $datesInfo,
      '#atc' => $datesAtc,
    ];
    $renderContact = [
      '#theme' => 'event_contact_info',
      '#info' => [
        'phone' => $location->field_location_phone->value,
        'fax' => $location->field_location_fax->value,
        'email' => !empty($location->field_location_email->value) ? Link::fromTextAndUrl(
          $location->field_location_email->value,
          Url::fromUri('mailto:' . $location->field_location_email->value,
            ['attributes' => ['target' => '_blank']])
        ) : '',
      ],
    ];

    $variables['items'][$i]['content'] = [
      $renderLocation,
      $renderDate,
      $renderContact,
    ];
  }

  $variables['#attached']['library'][] = 'openy_node_event/atc_base';
  $variables['#attached']['library'][] = 'openy_node_event/event_custom';
}

/**
 * Implements hook_preprocess_node().
 */
function openy_node_event_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'teaser' && $variables['node']->getType() == 'event') {
    // Get dates.
    $datesField = $variables['node']->get('field_event_dates')->getValue();
    $timezone = drupal_get_user_timezone();
    $startDt = DrupalDateTime::createFromFormat(DATETIME_DATETIME_STORAGE_FORMAT, $datesField[0]['value'], DATETIME_STORAGE_TIMEZONE);
    $startDt->setTimezone(timezone_open($timezone));
    $endDt = DrupalDateTime::createFromFormat(DATETIME_DATETIME_STORAGE_FORMAT, $datesField[0]['end_value'], DATETIME_STORAGE_TIMEZONE);
    $endDt->setTimezone(timezone_open($timezone)); 
    $variables['content']['event_converted_dates'] = [
      'date_start' => $startDt->format('g:i a'),
      'date_end' => $endDt->format('g:i a'),
    ];
  }
}

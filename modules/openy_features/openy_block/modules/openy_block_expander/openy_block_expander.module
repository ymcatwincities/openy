<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * @file
 * Module file.
 */

/**
 * Implements hook_theme().
 */
function openy_block_expander_theme($existing, $type, $theme, $path) {
  return [
    // Make Drupal aware of our node template for my view mode.
    'page__openy_block_expander_demo' => [
      'base hook' => 'page',
    ],
    'expander_block' => [
      'variables' => [
        'header' => NULL,
        'content' => NULL,
        'entity' => NULL,
      ],
      'template' => 'expander-block',
    ],
  ];
}

/**
 * Implements hook_preprocess().
 */
function openy_block_expander_preprocess(&$variables, $hook, &$info) {
  if ($node = \Drupal::routeMatch()->getRouteName() == 'openy_block_expander.demo') {
    if ($hook == 'page') {
      if (substr($info['theme path'], 0, 7) != 'themes/') {
        $info['theme path'] = drupal_get_path('module', 'openy_block_expander');
        $info['path'] = $info['theme path'] . '/templates';
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function openy_block_expander_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  /** @var \Drupal\block_content\Entity\BlockContent $entity */

  switch ($entity->bundle()) {

    case 'expander_block':
      $content = $entity->field_block_content->get(0);
      if (!$content) {
        \Drupal::logger('openy_block_expander')->notice(t('Content(expander block) is not found for entity: @id', ['@id' => $entity->id()]));
        break;
      }
      $build['expander'] = array(
        '#theme' => 'expander_block',
        '#header' => $entity->field_block_header->value,
        '#content' => array(
          '#type' => 'processed_text',
          '#text' => $content->value,
          '#format' => $content->format,
          '#langcode' => $content->getLangcode(),
        ),
        '#entity' => $entity,
      );
      break;
  }
}

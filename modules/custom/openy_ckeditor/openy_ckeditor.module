<?php

/**
 * @file
 * Contains openy_ckeditor.module.
 */

use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\editor\Entity\Editor;

/**
 * Implements hook_theme().
 */
function openy_ckeditor_theme($existing, $type, $theme, $path) {
  return [
    'list_branch_amenities' => [
      'variables' => [
        'amenities_open' => [],
        'amenities_closed' => NULL,
      ],
      'template' => 'list-branch-amenities',
    ],
  ];
}

/**
 * Implements hook_token_info().
 */
function openy_ckeditor_token_info() {
  $info['tokens']['node']['list-branch-amenities'] = [
    'name' => t('List of center Amenities'),
    'description' => t('Provides token for displaying list of center amenities'),
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function openy_ckeditor_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'openy') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'list-branch-amenities':
          /** @var \Drupal\Core\Entity\EntityInterface $entity */
          $entity = reset($data);
          if (empty($entity->getEntityTypeId())) {
            return $replacements;
          }
          /** @var \Drupal\node\NodeInterface $node */
          if (empty($node = \Drupal::routeMatch()->getParameter('node'))) {
            return $replacements;
          }
          if ($node->hasField('field_location_amenities')) {
            if (empty($amenities_values = $node->field_location_amenities->getValue())) {
              return $replacements;
            }
          }
          $has_closed = FALSE;
          if ($node->hasField('field_location_amenities_closed')) {
            $has_closed = TRUE;
            $closed_amenities_values = $node->field_location_amenities_closed->getValue();
          }

          $render_array = [
            '#theme' => 'list_branch_amenities',
            '#amenities_open' => _openy_ckeditor_prepare_amenities_view($amenities_values),
            '#amenities_closed' => $has_closed ? _openy_ckeditor_prepare_amenities_view($closed_amenities_values) : [],
          ];
          $replacements[$original] = render($render_array);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Helper function.
 * Prepares list of renderable terms based on reference field value.
 *
 * @param $field_value
 *
 * @return array $amenities_view
 */
function _openy_ckeditor_prepare_amenities_view($field_value) {
  $amenities_ids = [];
  foreach ($field_value as $id) {
    $amenities_ids[] = $id['target_id'];
  }
  $amenities = Term::loadMultiple($amenities_ids);
  $amenities_view = [];
  foreach ($amenities as $amenity) {
    $amenities_view[] = \Drupal::service('entity_type.manager')
      ->getViewBuilder('taxonomy_term')
      ->view($amenity, 'default');
  }
  return $amenities_view;
}

/**
 * Implements hook_page_attachments_alter().
 */
function openy_ckeditor_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['library'][] = 'openy_ckeditor/openy-ckeditor';
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function openy_ckeditor_ckeditor_css_alter(array &$css, Editor $editor) {
  if (!$editor->hasAssociatedFilterFormat()) {
    return;
  }
  $known_formats = [
    'basic_html',
    'full_html',
  ];

  if (in_array($editor->getFilterFormat()->id(), $known_formats)) {
    $css[] = drupal_get_path('module', 'openy_ckeditor') . '/css/openy_ckeditor.admin.css';
  }
}

/**
 * Implements hook_entity_embed_alter().
 */
function openy_ckeditor_entity_embed_alter(array &$build, EntityInterface $entity, array &$context) {
  if (!isset($context['data-widget']) || $context['data-widget'] != 'drupalentity') {
    return;
  }
  $view_mode = $build['#context']['data-entity-embed-display'];
  switch ($view_mode) {
    case 'view_mode:media.embedded_full':
      $build['#context']['data-entity-embed-display'] = 'view_mode:media.full_without_blazy';
      $build['entity']['#view_mode'] = 'full_without_blazy';
      break;

    case 'view_mode:media.embedded_half':
      $build['#context']['data-entity-embed-display'] = 'view_mode:media.half_without_blazy';
      $build['entity']['#view_mode'] = 'half_without_blazy';
      break;
  }
}

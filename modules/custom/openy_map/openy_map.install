<?php

/**
 * @file
 * Contains install and update routines.
 */

/**
 * Implements hook_install().
 */
function openy_map_install() {
  _openy_map_absolutize_config_icon_urls();
  _openy_map_set_default_location();
}

/**
 * Helper function.
 *
 * Absolutizes config icon urls.
 */
function _openy_map_absolutize_config_icon_urls() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('openy_map.settings');
  $icons_config = $config->get('type_icons');
  foreach ($icons_config as &$url) {
    $absolute_path = file_create_url(ltrim($url, '/'));
    if ($absolute_path != $url) {
      $url = $absolute_path;
    }
  }
  $search_icon = file_create_url('profiles/contrib/openy/modules/custom/openy_map/img/other/map_icon_red.png');
  $search_icon_retina = file_create_url('profiles/contrib/openy/modules/custom/openy_map/img/other/map_icon_red_x2.png');
  $config->set('type_icons', $icons_config)
    ->set('leaflet.search_icon', $search_icon)
    ->set('leaflet.search_icon_retina', $search_icon_retina)
    ->save(TRUE);
}

/**
 * Helper function.
 *
 * Sets Open Y Maps Leaflet location setting by copying the value of system
 * default location if it exists.
 */
function _openy_map_set_default_location() {
  $config_factory = \Drupal::configFactory();
  $countries = \Drupal::service('country_manager')->getList();
  $default_country = $config_factory->get('system.date')->get('country.default');
  if (!empty($countries[$default_country])) {
    $config_factory->getEditable('openy_map.settings')
      ->set('leaflet.location', $countries[$default_country])
      ->save(TRUE);
  }
}

/**
 * Import map default settings.
 */
function openy_map_update_8001() {
  $cim = \Drupal::service('config_import.importer');
  $cim->setDirectory(drupal_get_path('module', 'openy_map') . '/config/install');
  $cim->importConfigs(['openy_map.settings']);
}

/**
 * Import map default settings.
 */
function openy_map_update_8002() {
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('openy_map.settings')
    ->set('map_engine', 'gmaps')
    ->set('leaflet.base_layer', 'Wikimedia')
    ->save(TRUE);

  _openy_map_absolutize_config_icon_urls();
  _openy_map_set_default_location();
}

/**
 * Remove obsolete displays in locations view.
 */
function openy_map_update_8003() {
  $config_dir = drupal_get_path('module', 'openy_map') . '/config/install/';
  // Update multiple configurations.
  $configs = [
    'views.view.locations' => [
      'display',
    ],
  ];

  $config_updater = \Drupal::service('openy_upgrade_tool.param_updater');
  foreach ($configs as $config_name => $params) {
    $config = $config_dir . $config_name . '.yml';
    foreach ($params as $param) {
      $config_updater->update($config, $config_name, $param);
    }
  }
}

/**
 * Add Leaflet base layer override configuration.
 */
function openy_map_update_8004() {
  $config_updater = \Drupal::service('openy_upgrade_tool.param_updater');
  $config_dir = drupal_get_path('module', 'openy_map') . '/config/install/';
  $config_name = 'openy_map.settings';
  $config_path = $config_dir . $config_name . '.yml';
  $config_updater->update($config_path, $config_name, 'leaflet.base_layer_override');
}

/**
 * Add Leaflet clustering configuration.
 */
function openy_map_update_8005() {
  $config_updater = \Drupal::service('openy_upgrade_tool.param_updater');
  $config_dir = drupal_get_path('module', 'openy_map') . '/config/install/';
  $config_name = 'openy_map.settings';
  $config_path = $config_dir . $config_name . '.yml';
  $config_updater->update($config_path, $config_name, 'leaflet.clustering');
}

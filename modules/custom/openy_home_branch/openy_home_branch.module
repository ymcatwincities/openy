<?php

/**
 * @file
 * Contains openy_home_branch module hooks.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\openy_node_alert\Plugin\rest\resource\AlertsRestResource;

/**
 * Implements hook_preprocess_node().
 */
function openy_home_branch_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'branch') {
    // Add location ID as data attribute for VUE application.
    $variables['attributes']['data-hb-id'] = $variables['node']->id();
  }

  _openy_home_branch_attach_libraries('node', $variables);
}

/**
 * Implements hook_preprocess_paragraph().
 */
function openy_home_branch_preprocess_paragraph(&$variables) {
  _openy_home_branch_attach_libraries('paragraph', $variables);
}

/**
 * Implements hook_preprocess_block().
 */
function openy_home_branch_preprocess_block(&$variables) {
  _openy_home_branch_attach_libraries('block', $variables);
}

/**
 * Helper function for attaching HB plugins and settings to entity.
 */
function _openy_home_branch_attach_libraries($entity_type, &$variables) {
  $plugin_service = \Drupal::service('plugin.manager.home_branch_library');
  foreach ($plugin_service->getDefinitionsByEntityType($entity_type) as $plugin_id => $plugin) {
    $instance = $plugin_service->createInstance($plugin_id);
    if ($instance->isAllowedForAttaching($variables)) {
      $variables['#attached']['library'][] = $instance->getLibrary();

      if ($settings = $instance->getLibrarySettings()) {
        // Add library settings to drupalSettings.
        $plugin_service->attachHbLibrarySettings($variables, $plugin_id, $settings);
      }

      if ($tags = $instance->getCacheTags()) {
        // Add Cache tags.
        $plugin_service->addPluginCacheTags($variables, $tags);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Move field_alert_belongs field to sidebar details in advanced section.
 */
function openy_home_branch_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!in_array($form_id, ['node_alert_edit_form', 'node_alert_form'])) {
    return;
  }

  $form['openy_hb_settings'] = [
    '#type' => 'details',
    '#title' => t('Home Branch'),
    '#description' => t('Here you can set a reference to Branch that related to the current alert. In case the user selects the referenced branch as Home branch - this alert will be displayed on all pages and will ignore "Visibility pages" settings.'),
    '#open' => FALSE,
    '#group' => 'advanced',
    '#weight' => 125,
  ];

  if (!isset($form['field_alert_belongs'])) {
    $node = $form_state->getFormObject()->getEntity();
    // Add custom field widget in case field_alert_belongs hidden.
    $form['field_alert_belongs'] = [
      '#title' => t('Home Branch Reference'),
      '#type' => 'entity_autocomplete',
      '#target_type' => 'node',
      '#default_value' => $node->field_alert_belongs ? $node->field_alert_belongs->entity : NULL,
      '#selection_handler' => 'default',
      '#selection_settings' => [
        'target_bundles' => ['branch'],
      ],
    ];
  }

  $form['field_alert_belongs']['#group'] = 'openy_hb_settings';
}

/**
 * Implements hook_openy_node_alert_get_alter().
 *
 * In case selected Home Branch - add alerts with field_alert_belongs value
 * that equal to home branch ID to all pages.
 */
function openy_home_branch_openy_node_alert_get_alter(&$sendAlerts, $alerts) {
  if (empty($_COOKIE['home_branch'])) {
    return;
  }

  $hb_data = json_decode($_COOKIE['home_branch'], TRUE);

  if (empty($hb_data['id'])) {
    return;
  }

  foreach ($alerts as $id => $alert) {
    if ($alert->hasField('field_alert_belongs') && $alert->field_alert_belongs->target_id == $hb_data['id']) {
      if (_openy_hb_alert_alredy_exist($sendAlerts, $alert->field_alert_place->value, $hb_data['id'])) {
        // Skip if already exist.
        continue;
      }
      $sendAlerts[$alert->field_alert_place->value]['global'][] = AlertsRestResource::formatAlert($alert);
    }
  }
}

/**
 * Helper function for checking alert existing in $sendAlerts array.
 *
 * @param array $sendAlerts
 *   Formatted Alerts array with data for frontend application.
 * @param string $place
 *   Alerts place (header or footer).
 * @param int $id
 *   Searched Alert ID.
 *
 * @return bool
 */
function _openy_hb_alert_alredy_exist(array $sendAlerts, $place, $id) {
  if (!isset($sendAlerts[$place])) {
    return FALSE;
  }

  foreach ($sendAlerts[$place] as $alerts) {
    foreach ($alerts as $alert) {
      if ($alert['id'] == $id) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;

define('CAMPAIGN_BASIC_PALETTE', 'purpleorchid');
define('CAMPAIGN_COLORS_CSS_FOLDER', 'campaign_colors');
define('CAMPAIGN_MAIN_COLORS', ['mainlight', 'mainmedium', 'maindark']);

/**
 * Implements hook_theme().
 */
function openy_campaign_color_theme() {
  return [
    'openy_campaign_color_scheme_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_campaign_color_form_node_campaign_edit_form_alter(&$form, FormStateInterface $form_state) {
  openy_campaign_color_form_node_campaign_palette($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_campaign_color_form_node_campaign_form_alter(&$form, FormStateInterface $form_state) {
  openy_campaign_color_form_node_campaign_palette($form, $form_state);
}

/**
 * Alter form by adding OpenY palettes.
 */
function openy_campaign_color_form_node_campaign_palette(&$form, FormStateInterface $form_state) {
  if (color_get_info(OPENY_THEME) && function_exists('gd_info')) {
    $form['color'] = [
      '#type' => 'details',
      '#title' => t('Color scheme'),
      '#open' => TRUE,
      '#weight' => -1,
      '#attributes' => ['id' => 'openy_campaign_color_color_scheme_form'],
      '#theme' => 'openy_campaign_color_scheme_form',
    ];
    $form['color'] += openy_campaign_color_scheme_form($form, $form_state);

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'openy_campaign_color_color_scheme_form_submit';
      }
    }
  }
}

/**
 * Form constructor for the color configuration form for a particular theme.
 *
 * @param $complete_form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return array
 *
 * @see color_scheme_form_validate()
 * @see color_scheme_form_submit()
 */
function openy_campaign_color_scheme_form($complete_form, FormStateInterface $form_state) {
  $campaignPalette = NULL;
  if ($form_state->getFormObject() instanceof EntityForm) {
    $campaign = $form_state->getFormObject()->getEntity();
    $campaignPalette = $campaign->field_campaign_palette->value;
  }

  $info = color_get_info(OPENY_THEME);
  $color_sets = [];
  $schemes = [];
  foreach ($info['schemes'] as $key => $scheme) {
    $color_sets[$key] = $scheme['title'];
    $schemes[$key] = $scheme['colors'];
    $schemes[$key] += $info['schemes']['default']['colors'];
  }

  // Add scheme selector.
  $palette = color_get_palette(OPENY_THEME, FALSE);

  $form['scheme'] = [
    '#type' => 'select',
    '#title' => t('Color set'),
    '#options' => $color_sets,
    '#default_value' => $campaignPalette,
    '#attached' => [
      'library' => [
        'openy_campaign_color/backend',
      ],
      // Add custom JavaScript.
      'drupalSettings' => [
        'color' => [
          'reference' => $palette,
          'schemes' => $schemes,
        ]
      ],
    ],
  ];

  // Add palette fields. Use the configuration if available.
  $names = $info['fields'];
  $form['palette']['#tree'] = TRUE;
  foreach ($schemes[$campaignPalette] as $name => $value) {
    if (isset($names[$name]) && in_array($name, CAMPAIGN_MAIN_COLORS)) {
      $form['palette'][$name] = [
        '#type' => 'textfield',
        '#title' => $names[$name],
        '#value_callback' => 'color_palette_color_value',
        '#default_value' => $value,
        '#size' => 8,
        '#attributes' => ['disabled' => 'disabled']
      ];
    }
  }
  $form['theme'] = ['#type' => 'value', '#value' => OPENY_THEME];

  return $form;
}

/**
 * {@inheritdoc}
 */
function openy_campaign_color_color_scheme_form_submit(&$form, FormStateInterface $form_state) {
  /** @var Drupal\node\Entity\Node $entity */
  if ($entity = $form_state->getFormObject()->getEntity()) {
    $entity->set('field_campaign_palette', $form_state->getValue('scheme'));
    $entity->save();
  }
}

/**
 * {@inheritdoc}
 */
function openy_campaign_color_rebuild() {
  // Build CSS files for each color scheme.

  // Read basic CSS file.
  $cssPath = DRUPAL_ROOT . '/' . drupal_get_path('theme', CAMPAIGN_THEME) . '/css/colors.css';
  $cssData = file_get_contents($cssPath);

  // Get list of all possible colors palettes.
  $info = color_get_info(OPENY_THEME);
  $colorSets = [];
  $schemes = [];
  foreach ($info['schemes'] as $key => $scheme) {
    $colorSets[$key] = $scheme['title'];
    $schemes[$key] = $scheme['colors'];
    $schemes[$key] += $info['schemes']['default']['colors'];
  }

  // Basic colors will be used for the replacement.
  $basicColorSet = [];
  foreach ($schemes[CAMPAIGN_BASIC_PALETTE] as $key => $color) {
    if (!in_array($key, CAMPAIGN_MAIN_COLORS)) {
      continue;
    }
    // Lowercase the colors.
    $basicColorSet[$key] = strtolower($color);

    // Replace 3digits colors by full values.
    if (strlen($color) == 4) {
      $basicColorSet[$key] = $color . ltrim($color, '#');
    }
  }
  $basicColorSet = array_flip($basicColorSet);

  // Parse all colors from the basic CSS file..
  $re = '/(#[0-9a-f]{6}|#[0-9a-f]{3})/i';
  preg_match_all($re, $cssData, $matches, PREG_SET_ORDER, 0);

  $basicCssColors = [];
  $colorsMapping = [];
  foreach ($matches as $match) {
    $foundColor = $match[0];
    $color = strtolower($match[0]);
    // Replace 3digits colors by full values.
    if (strlen($color) == 4) {
      $color = $color . ltrim($color, '#');
    }
    $basicCssColors[] = $color;
    $colorsMapping[$foundColor] = $color;
  }
  $basicCssColors = array_unique($basicCssColors);

  // Replace all colors by lowercase values.
  foreach ($colorsMapping as $foundColor => $color) {
    $cssData = str_replace($foundColor, $color, $cssData);
  }

  // Generate CSS files for each palette.
  foreach ($schemes as $key => $scheme) {
    $newCss = $cssData;
    foreach ($basicCssColors as $color) {
      // Skip colors out of the main palette.
      if (!isset($basicColorSet[$color])) {
        continue;
      }
      $colorKey = $basicColorSet[$color];
      $newCss = str_replace($color, $scheme[$colorKey], $newCss);
    }

    file_unmanaged_save_data($newCss, 'public://' . CAMPAIGN_COLORS_CSS_FOLDER . '/' . $key . '.css', FILE_EXISTS_REPLACE);
  }
}

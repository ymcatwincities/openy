<?php

/**
 * @file
 * Contains install and update routines.
 */

/**
* Update configs.
*/
function openy_activity_finder_update_8001() {
  $openy_activity_finder_dir = drupal_get_path('module', 'openy_activity_finder');
  $cim = \Drupal::service('config_import.importer');
  $cim->setDirectory($openy_activity_finder_dir . '/config/install');
  $cim->importConfigs(['openy_activity_finder.settings']);

  $cim->setDirectory($openy_activity_finder_dir . '/config/optional');
  $config = \Drupal::config('search_api.index.default');
  if (!$config->isNew()) {
    // Import config only in case it already exist.
    $cim->importConfigs(['search_api.index.default']);
  }
}

/**
 * Update configs.
 */
function openy_activity_finder_update_8002() {
  $cim = \Drupal::service('config_import.importer');
  $cim->setDirectory(drupal_get_path('module', 'openy_activity_finder') . '/config/optional');
  $config = \Drupal::config('search_api.index.default');
  if (!$config->isNew()) {
    // Import config only in case it already exist.
    $cim->importConfigs(['search_api.index.default']);
  }
}

/**
 * Update configs.
 */
function openy_activity_finder_update_8003() {
  \Drupal::service('module_installer')->install(['openy']);
  $cim = \Drupal::service('config_import.importer');
  $cim->setDirectory(drupal_get_path('module', 'openy_activity_finder') . '/config/install');
  $cim->importConfigs(['openy_activity_finder.settings']);
}

/**
 * Update Activity Finder configs.
 */
function openy_activity_finder_update_8004(&$sandbox) {
  \Drupal::configFactory()
    ->getEditable('openy_activity_finder.settings')
    ->set('index', 'default')
    ->save();
}

/**
 * Update configs.
 */
function openy_activity_finder_update_8005() {
  $cim = \Drupal::service('config_import.importer');
  $cim->setDirectory(drupal_get_path('module', 'openy_activity_finder') . '/config/optional');
  $config = \Drupal::config('search_api.index.default');
  if (!$config->isNew()) {
    // Import config only in case it already exist.
    $cim->importConfigs(['search_api.index.default']);
  }
}

/**
 * Enable Search API Solr legacy if needed.
 */
function openy_activity_finder_update_8006() {
  $messages = [];
  if (openy_enable_search_api_solr_legacy()) {
    $messages[] = '***';
    $messages[] = '*** You are using a legacy version of Apache Solr. Enabling the Search API Solr Legacy module. ***';
    $messages[] = '***';
    $messages[] = '';
  }
  $messages[] = '* MAJOR SOLR SEARCH MODULE UPGRADE (1.x to 4.x).';
  $messages[] = '*';
  $messages[] = '* Download the updated Apache Solr configuration form the Search API module <a href="/admin/config/search/search-api">configuration page</a>.';
  $messages[] = '** On the page, find each individual Search server, click its name and download the config.zip using "Get config.zip" button.';
  $messages[] = '** Alternatively, use `drush solr-gsc YOUR_SEARCH_API_SERVER_ID` command.';
  $messages[] = '** Alternatively, use a jump-start configuration from https://git.drupalcode.org/project/search_api_solr/-/tree/4.x/jump-start';
  $messages[] = '* Apply the new Solr configuration. Ask your server administrator or a hosting support for assistance.';
  $messages[] = '* Reindex the associated Search API indexes.';
  $messages[] = '*';
  $messages[] = '* For more details see https://www.drupal.org/docs/8/modules/search-api-solr/search-api-solr-howtos/migrate-from-8x-1x-to-4x';
  $messages[] = '*';

  $messenger = \Drupal::messenger();
  foreach ($messages as $message) {
    $messenger->addMessage($message, 'warning');
    if (function_exists('drush_print')) {
      drush_print($message);
    }
  }
}

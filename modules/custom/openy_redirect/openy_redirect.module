<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Url;
use Drupal\redirect\Entity\Redirect;
use Drupal\Core\Language\Language;

/**
 * Implements hook_entity_base_field_info().
 */
function openy_redirect_entity_base_field_info(EntityTypeInterface $entity_type) {
  if (in_array($entity_type->id(), ['node'], TRUE)) {
    $fields['redirect'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Redirects'))
      ->setDescription(t('Add URLs to redirect to this page'))
      ->setTranslatable(TRUE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 30,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setComputed(TRUE);

    return $fields;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function openy_redirect_form_node_form_alter(&$form, FormStateInterface $form_state) {
  
  $node = \Drupal::routeMatch()->getParameter('node');
  // Create the group for the redirect fields.
  $form['redirect_settings'] = [
    '#type' => 'details',
    '#title' => t('Redirects'),
    '#open' => !empty($form['redirect']['widget'][0]['value']['#value']),
    '#group' => 'advanced',
    '#weight' => 30,
  ];
  $form['redirect']['#group'] = 'redirect_settings';

  // Add custom submit to create redirects.
  $form['actions']['submit']['#submit'][] = 'openy_redirect_submit';
  
  if ($node instanceof \Drupal\node\NodeInterface) {
    $language = $node->language()->getId();
    

    // Set default values.
    $nid = $node->id();
    $redirect_url = 'internal:/' . $node->toUrl()->getInternalPath();

    $redirects = openy_redirect_load_redirects_by_redirect_uri($redirect_url, $language);
    
    $i = 0;
    /** @var Redirect $item */
    foreach ($redirects as $item) {
      $source = $item->getSource();
      $options = !empty($source['query']) ? $source['query'] : [];
      if ($i > 0) {
        $form['redirect']['widget'][$i] = $form['redirect']['widget'][$i-1];
      }
      $form['redirect']['widget'][$i]['value']['#default_value'] = Url::fromUserInput($source['path'], $options);
      $i++;
    }

    // Set total count of redirect items for correct behavior "Add more" ajax button.
    $count = 0;
    foreach ($form['redirect']['widget'] as $key => $value) {
      if (is_numeric($key)) {
        $count++;
      }
    }
    $storage = $form_state->getStorage();
    $storage['field_storage']['#parents']['#fields']['redirect']['items_count'] = $count - 1;
    $form_state->setStorage($storage);
  }
}

/**
 * Custom submit to create redirects.
 */
function openy_redirect_submit($form, FormStateInterface $form_state) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $language = Language::LANGCODE_NOT_SPECIFIED;
  if ($node instanceof \Drupal\node\NodeInterface) {
    $language = $node->language()->getId();
  } 
  else {
    $nid = $form_state->getStorage()['nid'];
    $node_storage = \Drupal::entityManager()->getStorage('node');

    // Load a single node.
    $node = $node_storage->load($nid);
    $language = $node->language()->getId();
  }

  $redirectSources = $form_state->getValue('redirect');
  
  $node_url = $node->toUrl()->getInternalPath();
  $redirect_url = 'internal:/' . $node_url;
  // Delete all redirects for this node to save it from scratch later.
  $redirects = openy_redirect_load_redirects_by_redirect_uri($redirect_url, $language);
  if (!empty($redirects)) {
    /** @var Redirect $item */
    foreach ($redirects as $item) {
      $item->delete();
    }
  }

  /** @var \Drupal\redirect\RedirectRepository $redirect_repository */
  $redirect_repository = \Drupal::service('redirect.repository');
  foreach ($redirectSources as $item) {
    if (!$redirect_repository->findMatchingRedirect($item['value'], [], $language)) {
      if (empty(trim($item['value']))) {
        continue;
      }
      /** @var \Drupal\redirect\Entity\Redirect $redirect */
      $redirect = Redirect::create();
      $redirect->setSource($item['value']);
      $redirect->setRedirect($node_url);
      $redirect->setLanguage($language);
      $redirect->setStatusCode(\Drupal::config('redirect.settings')->get('default_status_code'));
      $redirect->save();
    } else {
      drupal_set_message(t('Redirect for "@source" already exists', ['@source' => $item['value']]));
    }
  }
}

/**
 * Helper function to find Redirects by redirect target uri.
 */
function openy_redirect_load_redirects_by_redirect_uri($redirect_uri, $language = Language::LANGCODE_NOT_SPECIFIED) {
  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
  $entityTypeManager = \Drupal::service('entity_type.manager');
  $redirectIds = $entityTypeManager->getStorage('redirect')->getQuery()
    ->condition('redirect_redirect__uri', $redirect_uri)
    ->condition('language', $language)
    ->execute();

  return Redirect::loadMultiple($redirectIds);
}

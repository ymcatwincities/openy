<?php

/**
 * @file
 * Module file.
 */

use Drupal\openy_group_schedules\GroupexScheduleFetcher;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_theme().
 */
function openy_group_schedules_theme($existing, $type, $theme, $path) {
  return [
    'groupex_class' => [
      'variables' => [
        'class' => [],
      ],
      'template' => 'groupex-class',
    ],
    'groupex_table_class' => [
      'variables' => [
        'class' => [],
      ],
      'template' => 'groupex-table-class',
    ],
    'groupex_table_class_individual' => [
      'variables' => [
        'class' => [],
        'used_filters' => []
      ],
      'template' => 'groupex-table-class-individual',
    ],
    'groupex_table_instructor_individual' => [
      'variables' => [
        'class' => [],
      ],
      'template' => 'groupex-table-instructor-individual',
    ],
    'groupex_schedule_day' => [
      'variables' => [
        'classes' => [],
        'title' => '',
        'pdf_href' => '',
      ],
      'template' => 'groupex-schedule-day',
    ],
    'groupex_schedule_table_day' => [
      'variables' => [
        'classes' => [],
        'title' => '',
        'pdf_href' => '',
      ],
      'template' => 'groupex-schedule-table-day',
    ],
    'groupex_schedule_week' => [
      'variables' => [
        'days' => [],
        'pdf_href' => '',
      ],
      'template' => 'groupex-schedule-week',
    ],
    'groupex_schedule_table_week' => [
      'variables' => [
        'days' => [],
        'instructor_location' => '',
        'pdf_href' => '',
      ],
      'template' => 'groupex-schedule-table-week',
    ],
    'groupex_schedule_location' => [
      'variables' => [
        'locations' => [],
        'filter_date' => '',
      ],
      'template' => 'groupex-schedule-location',
    ],
    'groupex_schedule_table_location' => [
      'variables' => [
        'locations' => [],
        'filter_date' => '',
      ],
      'template' => 'groupex-schedule-table-location',
    ],
    'groupex_all_search_results' => [
      'variables' => [
        'form' => '',
        'schedule' => '',
        'empty_results' => FALSE,
        'image' => '',
      ],
      'template' => 'groupex-all-search-results',
    ],
  ];
}

/**
 * Helper function to make schedules layout.
 *
 * @param array $schedule
 *   Fetched and process schedule.
 *
 * @return array
 *   Results render array.
 */
function openy_group_schedules_schedule_layout(array $schedule) {
  $results = [];
  $conf = Drupal::config('openy_group_schedules.settings');
  $max_age = is_numeric($conf->get('cache_max_age')) ? $conf->get('cache_max_age') : 3600;
  $cache = [
    'max-age' => $max_age,
    'contexts' => ['url.query_args'],
  ];

  // Output schedule by type.
  switch ($schedule['type']) {
    case 'day':
      // Check if there is something.
      if (!empty($schedule['classes'])) {
        $results = [
          '#theme' => 'groupex_schedule_day',
          '#classes' => $schedule['classes'],
          '#title' => $schedule['title'],
          '#pdf_href' => !empty($schedule['pdf_href']) ? $schedule['pdf_href'] : NULL,
          '#cache' => $cache,
        ];
      }
      break;

    case 'week':
      // Check if there is something.
      if (!empty($schedule['days'])) {
        $results = [
          '#theme' => 'groupex_schedule_week',
          '#days' => $schedule['days'],
          '#pdf_href' => !empty($schedule['pdf_href']) ? $schedule['pdf_href'] : NULL,
          '#cache' => $cache,
        ];
      }
      break;

    case 'location':
      // Check if there is something.
      if (!empty($schedule['locations'])) {
        $results = [
          '#theme' => 'groupex_schedule_location',
          '#locations' => $schedule['locations'],
          '#filter_date' => $schedule['filter_date'],
          '#cache' => $cache,
        ];
      }
      break;
  }

  return $results;
}

/**
 * Implements hook_preprocess_node().
 */
function openy_group_schedules_preprocess_node(&$variables) {
  // Pass the form to the schedules page.
  if ($variables['node']->bundle() == 'location' && $variables['view_mode'] == 'schedules') {
    $variables['form_find_classes'] = [
      'form' => [
        '#lazy_builder' => [
          'form_builder:getForm',
          ['Drupal\openy_group_schedules\Form\GroupexFormFull']
        ],
        '#create_placeholder' => TRUE,
      ],
    ];

    $mapping_id = \Drupal::entityQuery('mapping')
      ->condition('type', 'location')
      ->condition('field_location_ref', $variables['node']->id())
      ->execute();
    $mapping_id = reset($mapping_id);
    $groupex_id = FALSE;
    if ($mapping = \Drupal::entityManager()->getStorage('mapping')->load($mapping_id)) {
      $field_groupex_id = $mapping->field_groupex_id->getValue();
      $groupex_id = isset($field_groupex_id[0]['value']) ? $field_groupex_id[0]['value'] : FALSE;
    }

    if ($groupex_id) {
      $variables['print_group_exercise_uri'] = \Drupal::service('openy_group_schedules.helper')->getPdfLink($groupex_id);
    }
    else {
      \Drupal::logger('openy_group_schedules')->error('Failed to get location id.');
    }
  }

  // Pass the search results to the schedules page.
  if ($variables['node']->bundle() == 'location' && $variables['view_mode'] == 'groupex') {
    $query = \Drupal::request()->query->all();

    // Output refine form.
    $form = \Drupal::formBuilder()->getForm('Drupal\openy_group_schedules\Form\GroupexFormLocationRefine', $query);
    $variables['groupex_form_refine'] = \Drupal::service('renderer')->render($form, FALSE);

    // Get classes schedules.
    $schedule = \Drupal::service('openy_group_schedules.schedule_fetcher')->getSchedule();

    // Are results empty?
    $variables['empty_results'] = \Drupal::service('openy_group_schedules.schedule_fetcher')->isEmpty();

    // Output schedule.
    $formatted_schedule = openy_group_schedules_schedule_layout($schedule);
    $variables['groupex_search_results'] = \Drupal::service('renderer')->render($formatted_schedule, FALSE);
  }
}

/**
 * Helper function to make schedules table layout.
 *
 * @param array $schedule
 *   Fetched and process schedule.
 *
 * @return array
 *   Results render array.
 */
function openy_group_schedules_schedule_table_layout(array $schedule) {
  $prefix = [];
  $results = [];

  $conf = Drupal::config('openy_group_schedules.settings');
  $max_age = is_numeric($conf->get('cache_max_age')) ? $conf->get('cache_max_age') : 3600;
  $cache = [
    'max-age' => $max_age,
    'contexts' => ['url.query_args'],
  ];

  // Mark filters these are used.
  $schedule['used_filters'] = [];

  // The filter `class` is used.
  if (array_key_exists('class', $_GET) && $_GET['class'] != 'any') {
    $schedule['used_filters'][] = 'class';
    $day = reset($schedule['days']);
    if ($day) {
      $class_item = reset($day['classes']);
      if ($class_item) {
        $class = $class_item['#class'];
        // Allow iframe tag in description to embed video.
        $allowed_tags = array_merge(Xss::getAdminTagList(), ['iframe']);
        $prefix = [
          [
            '#type' => 'container',
            '#markup' => $class['description'],
            '#allowed_tags' => $allowed_tags,
            '#attributes' => [
              'class' => ['class-description'],
            ],
          ],
        ];

        foreach ($schedule['days'] as &$day) {
          foreach ($day['classes'] as &$class_item) {
            $class_item['#used_filters'] = $schedule['used_filters'];
          }
        }
      }
    }
  }

  // Show help text in case of there is no prefix and there are results.
  if (empty($prefix)) {
    $prefix = [
      [
        '#type' => 'container',
        '#markup' => '<p>Please note, you may search by class or instructor by clicking on the links in class cards.</p>',
        '#attributes' => [
          'class' => ['class-description'],
        ],
      ],
    ];
  }

  // Output schedule by type.
  switch ($schedule['type']) {
    case 'day':
      // Check if there is something.
      if (!empty($schedule['classes'])) {
        $results = [
          '#theme' => 'groupex_schedule_table_day',
          '#classes' => $schedule['classes'],
          '#title' => $schedule['title'],
          '#pdf_href' => !empty($schedule['pdf_href']) ? $schedule['pdf_href'] : NULL,
          '#cache' => $cache,
        ];
      }
      break;

    case 'week':
      // Check if there is something.
      if (!empty($schedule['days'])) {
        $results = [
          '#theme' => 'groupex_schedule_table_week',
          '#days' => $schedule['days'],
          '#pdf_href' => !empty($schedule['pdf_href']) ? $schedule['pdf_href'] : NULL,
          '#cache' => $cache,
        ];
      }
      break;

    case 'location':
      // Check if there is something.
      if (!empty($schedule['locations'])) {
        $results = [
          '#theme' => 'groupex_schedule_table_location',
          '#locations' => $schedule['locations'],
          '#filter_date' => $schedule['filter_date'],
          '#cache' => $cache,
        ];
      }
      break;

    case 'instructor':
      // Check if there is something.
      if (!empty($schedule['days'])) {
        $results = [
          '#theme' => 'groupex_schedule_table_week',
          '#days' => $schedule['days'],
          '#instructor_location' => $schedule['instructor_location'],
          '#pdf_href' => !empty($schedule['pdf_href']) ? $schedule['pdf_href'] : NULL,
          '#cache' => $cache,
        ];
      }
      break;
  }

  return [
    $prefix,
    $results
  ];
}

/**
 * Implements hook_openy_sync_description_alter().
 */
function openy_group_schedules_openy_sync_description_alter(&$items) {
  $items[] = 'openy_google.syncer - Google Calendar syncer.';
}

<?php

/**
 * @file
 * Module installation file.
 */

use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_install().
 */
function openy_search_api_install() {
  // Create search results page for default search api.
  $entity_type_manager = Drupal::entityTypeManager();
  $paragraph_storage = $entity_type_manager->getStorage('paragraph');
  $node_storage = $entity_type_manager->getStorage('node');

  $search_paragraph = $paragraph_storage->create([
    'type' => 'search_api',
  ]);
  if (!$search_paragraph->save()) {
    return;
  }

  $page = $node_storage->create([
    'type' => 'landing_page',
    'title' => 'Search',
    'field_lp_layout' => 'one_column',
    'langcode' => 'en',
    'uid' => '1',
    'field_content' => [
      [
        'target_id' => $search_paragraph->id(),
        'target_revision_id' => $search_paragraph->getRevisionId(),
      ],
    ],
    'status' => NodeInterface::PUBLISHED,
  ]);
  if ($page->save()) {
    Drupal::configFactory()
      ->getEditable('openy_search_api.settings')
      ->set('search_page_id', $page->id())
      ->save();
  }

  // Display message if Open Y installed.
  if (\Drupal::moduleHandler()->moduleExists('openy_system')) {
    $url = Url::fromRoute('search_api.overview');
    $args = [
      ':search_api_overview' => $url->toString(),
    ];
    $messenger = \Drupal::messenger();
    $messenger->addMessage(
      t('Please check your search_api <a href=":search_api_overview">search settings page</a>', $args),
      'status'
    );
  }
}

/**
 * Implements hook_uninstall().
 */
function openy_search_api_uninstall() {
  if ($nid = Drupal::configFactory()
    ->get('openy_search_api.settings')
    ->get('search_page_id')) {
    $node_storage = Drupal::entityTypeManager()->getStorage('node');
    if ($node = $node_storage->load($nid)) {
      $node->delete();
    }
  }
}

/**
 * Enable Search API Solr legacy if needed.
 */
function openy_search_api_update_8001() {
  $messages = [];
  if (openy_enable_search_api_solr_legacy()) {
    $messages[] = '***';
    $messages[] = '*** You are using a legacy version of Apache Solr. Enabling the Search API Solr Legacy module. ***';
    $messages[] = '***';
    $messages[] = '';
  }
  $messages[] = '* MAJOR SOLR SEARCH MODULE UPGRADE (1.x to 4.x).';
  $messages[] = '*';
  $messages[] = '* Download the updated Apache Solr configuration form the Search API module <a href="/admin/config/search/search-api">configuration page</a>.';
  $messages[] = '** On the page, find each individual Search server, click its name and download the config.zip using "Get config.zip" button.';
  $messages[] = '** Alternatively, use `drush solr-gsc YOUR_SEARCH_API_SERVER_ID` command.';
  $messages[] = '** Alternatively, use a jump-start configuration from https://git.drupalcode.org/project/search_api_solr/-/tree/4.x/jump-start';
  $messages[] = '* Apply the new Solr configuration. Ask your server administrator or a hosting support for assistance.';
  $messages[] = '* Reindex the associated Search API indexes.';
  $messages[] = '*';
  $messages[] = '* For more details see https://www.drupal.org/docs/8/modules/search-api-solr/search-api-solr-howtos/migrate-from-8x-1x-to-4x';
  $messages[] = '*';

  $messenger = \Drupal::messenger();
  foreach ($messages as $message) {
    $messenger->addMessage($message, 'warning');
    if (function_exists('drush_print')) {
      drush_print($message);
    }
  }
}

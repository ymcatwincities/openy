<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function openy_addthis_form_node_form_alter(&$form, FormStateInterface $form_state) {
  // Create the group for the addtdis field.
  $form['addthis_settings'] = [
    '#type' => 'details',
    '#title' => t('Social share icons'),
    '#open' => FALSE,
    '#group' => 'advanced',
    '#weight' => 115,
  ];
  $form['addthis']['#group'] = 'addthis_settings';

  // Set default value if node isn't have the addThis value.
  $node = $form_state->getFormObject()->getEntity();
  if (!$node->id() || !$node->addthis->getValue()) {
    $form['addthis']['widget']['value']['#default_value'] = _openy_addthis_get_value($node);
  }

}

/**
 * Implements hook_entity_base_field_info().
 */
function openy_addthis_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'node') {
    return FALSE;
  }

  $fields['addthis'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Enable addThis'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setDefaultValue(FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'string',
      'weight' => 100,
    ])
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
      'weight' => 16,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  return $fields;
}

/**
 * Get value for node addThis.
 *
 * @param object $node
 *   Node object.
 *
 * @return bool
 *   TRUE if addThis should be shown on the node and FALSE if should not.
 */
function _openy_addthis_get_value($node) {
  $value = FALSE;
  if ($node->id() && isset($node->addthis) && $node->addthis->getValue()) {
    $value = (bool) $node->addthis->getString();
  }
  else {
    $config = \Drupal::config('openy_addthis.settings')->get('bundles');
    if ($config) {
      $value = in_array($node->bundle(), $config);
    }
  }

  return $value;
}

/**
 * Implements hook_entity_view().
 */
function openy_addthis_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $node_cond = $entity->getEntityTypeId() == 'node' && isset($build['addthis']);
  $paragraph_cond = $entity->getEntityTypeId() == 'paragraph' && $entity->bundle() == 'addthis';

  // Check conditions.
  if (!$node_cond && !$paragraph_cond) {
    return;
  }

  // Check if addThis should be shown and if it should print it.
  $addthis_id = \Drupal::config('openy_addthis.settings')->get('public_id');
  if ($entity->getEntityTypeId() == 'node' && !_openy_addthis_get_value($entity) || !$addthis_id) {
    $build['addthis'][0]['#markup'] = '';
  }
  else {
    // @todo currently we support only inline type.
    $build['addthis'][0]['#markup'] = '<div class="addthis_inline_share_toolbox"></div>';
    $build['#attached']['library'][] = 'openy_addthis/addthis';
    $build['#attached']['drupalSettings']['addThisId'] = $addthis_id;
  }
}
